// Prisma Schema File for Ophelus
// Reference: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// =======================
// Schema Structure
// =======================

// - Gamification (Cat)
//     - World (Sc)
//         - Chucks (Sc)
//             - Tile (Sc)
//                 - Resource tile (Sc)
//                 - Building tile (Sc)
//     - Zombie (Sc)

// =======================
// Gamification
// =======================

// World Definition
model World {
  // default world attributes
  id String @default(uuid()) @id // there will be a lot of worlds as the user scales
  name String // the name of the worlds
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // one to one relationship between world and user model using userid and worldid as connectors
  ownedUser User? @relation(fields: [ownedUserid], references: [userid])
  ownedUserid String? @unique

  // one to many relationship between world and chuck model using worldid as connector
  chucks Chuck[]
}

model Chuck {
  // default chuck attributes
  chuckid String @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Chuck specific attributes
  chuckX Int
  chuckY Int
  @@unique([worldid, chuckX, chuckY])
  // one to many relationship between chuck and tile model using chuckid as connector
  tiles Tile[]
  // one to many relationship between chuck and world model using worldid as connector
  world World @relation(fields: [worldid], references: [id])
  worldid String
  // archived attributes
  // name String? // maybe for projects  
}


// Tile Definition
model Tile {
  // default tile attributes
  chuckid String
  @@id([tileX, tileY, chuckid])
  // tile specific attributes
  tileX Int
  tileY Int
  // relationships
  chuck Chuck @relation(fields: [chuckid], references: [chuckid])

  resourceTile ResourceTile?
  buildingTile BuildingTile?
  
}

model ResourceTile {
  // default resource tile attributes
  tileX Int
  tileY Int
  chuckid String
  @@id([tileX, tileY, chuckid])
  // resource tile specific attributes
  resourceType ResourceType
  count Int
  health Int
  production_speed Int // how fast the resource tile produces resources, updates every minute from the server for smooth app experience
  // relationships
  tile Tile @relation(fields: [tileX, tileY, chuckid], references: [tileX, tileY, chuckid])
}

model BuildingTile {
  // default building tile attributes
  tileX Int
  tileY Int
  chuckid String
  @@id([tileX, tileY, chuckid])
  // building tile specific attributes
  buildingType BuildingType
  health Int
  level Int
  resource_count Int? // how many resources are stored in the buildingW
  // relationships
  tile Tile @relation(fields: [tileX, tileY, chuckid], references: [tileX, tileY, chuckid])
}

enum ResourceType {
  EMPTY
  WOOD
  GOLD
  MOUNTAIN
  ZOMBIE_HIVE
}

enum BuildingType {
  BASE
  WALL
  DOOR
  MARKET
  CONNECTOR
  GOLD_MINE
  GOLD_BOOSTER
  GOLD_STORAGE
  TREE_MINE
  TREE_BOOSTER
  TREE_STORAGE
}

// =======================
// Productivity
// =======================

// - Productivity (Cat)
//     - Tasks (Sc)
//     - Habits (Sc)
//     - Work Sessions (Sc)

// Task Definition
enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETE
}

model Task {
  // default task attributes
  taskid String @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // task specific attributes
  name String
  description String?
  time_estimate Int? // in minutes
  difficulty_estimate Int? // from 1 - 5
  priority Int? // from 1 - 5
  due_date DateTime? // when is the task due
  completedAt DateTime? // when was the task completed
  status TaskStatus? @default(TODO)// what is the status of the task

  // relationships
  user User @relation(fields: [userid], references: [userid])
  userid String
}

// Habit Definition
model Habit {
  // default habit attributes
  habitid String @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // habit specific attributes
  name String
  description String?
  frequency Int // defined by the number of days where this habit cycles
  streak Int // how many days in a row have you completed this habit
  startDate DateTime? // when did you start this habit
  completedAt DateTime? // when was the habit completed
  status TaskStatus? @default(TODO)// what is the status of the habit
  
  // specialized habit attributes
  frequncy_time Int // how much time you will spend per iteration of the habit

  // relationships
  user User @relation(fields: [userid], references: [userid])
  userid String
}

// =======================
// Social
// =======================

// - Social (Cat)
//     - Leaderboard (Sc)
//     - User Profile (Sc)
//          - Social Profile (Sc)
//              - Description (At)
//          - Game Profile (Sc)
//              - Player Stats (At)
//          - Settings (Sc)

model User {
  // default attributes
  userid String @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // basic information
  firstName String
  lastName String
  username String @unique
  
  // relationships
  // gamification
  world World?

  // productivity
  tasks Task[]
  habits Habit[]
  workSessions WorkSession[]
}