// Prisma Schema File for Ophelus
// Reference: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// =======================
// Schema Structure
// =======================

// - Gamification (Cat)
//     - World (Sc)
//         - Chucks (Sc)
//             - Tile (Sc)
//                 - Resource tile (Sc)
//                 - Building tile (Sc)
//     - Zombie (Sc)
// - Productivity (Cat)
//     - Tasks (Sc)
//     - Habits (Sc)
//     - Work Sessions (Sc)
// - Social (Cat)
//     - Leaderboard (Sc)
//     - User Profile (Sc)
//          - Social Profile (Sc)
//              - Description (At)
//          - Game Profile (Sc)
//              - Player Stats (At)
//          - Settings (Sc)

// =======================
// Gamification
// =======================

// World Definition
model World {
  // default world attributes
  id String @default(uuid()) @id // there will be a lot of worlds as the user scales
  name String // the name of the worlds
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // one to one relationship between world and user model using userid and worldid as connectors
  ownedUser User? @relation(fields: [ownedUserid], references: [userid])
  ownedUserid String? @unique

  // one to many relationship between world and chuck model using worldid as connector
  chucks Chuck[]
}

model Chuck {
  // default chuck attributes
  chuckid Int @default(autoincrement()) @id  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Chuck specific attributes
  chuckX Int
  chuckY Int
  @@unique([worldid, chuckX, chuckY])
  // one to many relationship between chuck and tile model using chuckid as connector
  tiles Tile[]
  // one to many relationship between chuck and world model using worldid as connector
  world World @relation(fields: [worldid], references: [id])
  worldid String
  // archived attributes
  // name String? // maybe for projects  
}


// Tile Definition
model Tile {
  // default tile attributes
  chuckid Int
  @@id([tileX, tileY, chuckid])
  // tile specific attributes
  tileX Int
  tileY Int
  // relationships
  chuck Chuck @relation(fields: [chuckid], references: [chuckid])

  resourceTile ResourceTile
  buildingTile BuildingTile?
  
}

model ResourceTile {
  // default resource tile attributes
  tileX Int
  tileY Int
  chuckid Int
  @@id([tileX, tileY, chuckid])
  // resource tile specific attributes
  resourceType ResourceType
  // relationships
  tile Tile @relation(fields: [tileX, tileY, chuckid], references: [tileX, tileY, chuckid])
}

model BuildingTile {
  // default building tile attributes
  tileX Int
  tileY Int
  chuckid Int
  @@id([tileX, tileY, chuckid])
  // building tile specific attributes
  buildingType BuildingType
  // relationships
  tile Tile @relation(fields: [tileX, tileY, chuckid], references: [tileX, tileY, chuckid])

}

enum ResourceType {
  WOOD
  GOLD
  EMPTY
  MOUNTAIN
}

enum BuildingType {
  BASE
  GOLDMINE
  TREEMINE
  GOLDSTORAGE
  TREESTORAGE
  WALL
  DOOR
}

// =======================
// Productivity
// =======================

// =======================
// Social
// =======================
model User {
  // default attributes
  userid String @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // basic information
  firstName String
  lastName String
  username String @unique
  
  // create a one to one relationship between user and world model using userid and worldid as connectors
  world World?
}